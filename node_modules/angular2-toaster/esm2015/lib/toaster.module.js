import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ToastComponent } from './toast.component';
import { ToasterContainerComponent } from './toaster-container.component';
import { ToasterService } from './toaster.service';
import { TrustHtmlPipe } from './trust-html.pipe';
import * as ɵngcc0 from '@angular/core';
export class ToasterModule {
    static forRoot() {
        return {
            ngModule: ToasterModule,
            providers: [ToasterService, ToasterContainerComponent]
        };
    }
    static forChild() {
        return {
            ngModule: ToasterModule,
            providers: [ToasterContainerComponent]
        };
    }
}
ToasterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ToasterModule });
ToasterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ToasterModule_Factory(t) { return new (t || ToasterModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToasterModule, { declarations: function () { return [ToastComponent,
        ToasterContainerComponent,
        TrustHtmlPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ToasterContainerComponent,
        ToastComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToasterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    ToastComponent,
                    ToasterContainerComponent,
                    TrustHtmlPipe
                ],
                exports: [
                    ToasterContainerComponent,
                    ToastComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbmd1bGFyMi10b2FzdGVyL3NyYy9saWIvdG9hc3Rlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDOztBQWNsRCxNQUFNLE9BQU8sYUFBYTtBQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPO0FBQUssUUFDZixPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsYUFBYTtBQUNuQyxZQUFZLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSx5QkFBeUIsQ0FBQztBQUNsRSxTQUFTLENBQUE7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLE1BQU0sQ0FBQyxRQUFRO0FBQUssUUFDaEIsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLGFBQWE7QUFDbkMsWUFBWSxTQUFTLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztBQUNsRCxTQUFTLENBQUE7QUFDVCxJQUFJLENBQUM7QUFDTDt5Q0ExQkMsUUFBUSxTQUFDO0tBQ04sT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLGtCQUN2QixZQUFZLEVBQUUsc0JBQ1YsY0FBYyxzQkFDZCx5QkFBeUI7S0FDekIsYUFBYSxrQkFDaEIsa0JBQ0QsT0FBTyxFQUFFLHNCQUNMLHlCQUF5QixzQkFDekIsY0FBYztHQUNqQixjQUNKOzs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUb2FzdENvbXBvbmVudCB9IGZyb20gJy4vdG9hc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFRvYXN0ZXJDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0ZXItY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUb2FzdGVyU2VydmljZSB9IGZyb20gJy4vdG9hc3Rlci5zZXJ2aWNlJztcbmltcG9ydCB7IFRydXN0SHRtbFBpcGUgfSBmcm9tICcuL3RydXN0LWh0bWwucGlwZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIFRvYXN0Q29tcG9uZW50LFxuICAgICAgICBUb2FzdGVyQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICBUcnVzdEh0bWxQaXBlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFRvYXN0ZXJDb250YWluZXJDb21wb25lbnQsXG4gICAgICAgIFRvYXN0Q29tcG9uZW50XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBUb2FzdGVyTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRvYXN0ZXJNb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBUb2FzdGVyTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbVG9hc3RlclNlcnZpY2UsIFRvYXN0ZXJDb250YWluZXJDb21wb25lbnRdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZm9yQ2hpbGQoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxUb2FzdGVyTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogVG9hc3Rlck1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1RvYXN0ZXJDb250YWluZXJDb21wb25lbnRdXG4gICAgICAgIH1cbiAgICB9XG4gfVxuIl19